//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
    provider = "postgresql"
    url = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
    previewFeatures = ["fullTextSearch"]
}

enum Role {
    USER
    MANAGER
    ADMIN
}

enum Status {
    PENDING
    ACCEPTED
    DECLINED
}

/// @@deny('update', true)
/// @@allow('create', auth().role == ADMIN)
/// @@allow('create, read', true)
/// @@allow('update,delete', auth() == this)
/// @@allow('all', auth().role == ADMIN)
model User {
    id String @id()
    role Role @default(USER)
    profile Profile?
    campaigns Campaign[] @relation("managers")
}

/// @@allow('create,read', true)
/// @@allow('update,delete', auth() == user)
/// @@allow('all', auth().role == ADMIN)
model Profile {
    id String @id()
    name String @unique()
    user User @relation(fields: [id], references: [id])
    description String?
    image String?
    inventory CollectableCount[] @relation("inventory")
    wishlist CollectableCount[] @relation("wishlist")
    wares CollectableCount[] @relation("wares")
    achievements Achievement[]
    sales Trade[] @relation("seller")
    purchases Trade[] @relation("buyer")
    reputation Float @default(0)
    givenReviews Review[] @relation("reviewer")
    receivedReviews Review[] @relation("reviewee")
    chats Chat[] @relation("ChatsUsers")
}

/// @@allow('read', true)
/// @@allow('all', auth().role == ADMIN || auth().id == reviewer.id)
model Review {
    id Int @id() @default(autoincrement())
    rating Int
    comment String
    reviewee Profile @relation("reviewee", fields: [reviewerId], references: [id])
    revieweeId String
    reviewer Profile @relation("reviewer", fields: [revieweeId], references: [id])
    reviewerId String
}

/// @@allow('read', true)
/// @@allow('all', auth().role == ADMIN || auth().role == MANAGER)
model Achievement {
    id String @id()
    name String @unique()
    description String
    image String?
    users Profile[]
    collection Collection @relation(fields: [id], references: [name])
}

/// @@allow('read', true)
/// @@allow('create', auth().id == sellerId)
model Trade {
    id String @id()
    seller Profile @relation("seller", fields: [sellerId], references: [id])
    sellerId String
    buyer Profile @relation("buyer", fields: [buyerId], references: [id])
    buyerId String
    collectable Collectable @relation(fields: [collectableName], references: [name])
    collectableName String
    /// @allow('update', auth().id == sellerId)
    status Status @default(PENDING)
    price Int
}

/// @@allow('create', true)
/// @@allow('read, delete, update', users ? [user.id == auth().id])
model Chat {
    id Int @id() @default(autoincrement())
    messages Message[]
    users Profile[] @relation("ChatsUsers")
}

/// @@allow('all', senderId == auth().id)
/// @@allow('read', chat.users ? [user.id == auth().id])
/// @@allow('all', auth().role == ADMIN)
model Message {
    id Int @id() @default(autoincrement())
    chatId Int
    chat Chat @relation(fields: [chatId], references: [id])
    senderId String
    content String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
}

/// @@allow('read', true)
/// @@allow('all', auth().role == ADMIN || auth().role == MANAGER)
model Collectable {
    name String @id() @unique()
    image String?
    tags String[]
    count CollectableCount[] @relation("count")
    collection Collection[] @relation("collection")
    Trade Trade[]
}

/// @@allow('all', true)
model CollectableCount {
    id Int @id() @default(autoincrement())
    collectable Collectable @relation("count", fields: [name], references: [name])
    name String
    count Int @default(0)
    inventory Profile? @relation("inventory", fields: [inventoryId], references: [id])
    inventoryId String?
    wishlist Profile? @relation("wishlist", fields: [wishlistId], references: [id])
    wishlistId String?
    wares Profile? @relation("wares", fields: [waresId], references: [id])
    waresId String?
}

/// @@allow('read', true)
/// @@allow('all', auth().role == ADMIN || auth().role == MANAGER)
model Collection {
    name String @id() @unique()
    image String?
    tags String[]
    collectables Collectable[] @relation("collection")
    collections Campaign[]
    achievement Achievement?
}

/// @@allow('read', true)
/// @@allow('all', auth().role == ADMIN || auth().role == MANAGER)
model Campaign {
    name String @id() @unique()
    image String?
    tags String[]
    start DateTime @default(now())
    end DateTime
    isActive Boolean @default(false)
    collections Collection[]
    managers User[] @relation("managers")
}