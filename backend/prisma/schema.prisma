//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
    provider = "postgresql"
    url = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
    previewFeatures = ["multiSchema","fullTextSearch"]
}

enum Role {
    USER
    MANAGER
    ADMIN
}

enum Status {
    PENDING
    ACCEPTED
    DECLINED
}

/// @@allow('create, read', true)
/// @@allow('update,delete', auth() == this)
/// @@allow('all', auth().role == 'ADMIN')
model User {
    id String @id()
    role Role @default(USER)
    profile Profile?
}

/// @@allow('create,read', true)
/// @@allow('update,delete', auth() == user)
/// @@allow('all', auth().role == 'ADMIN')
model Profile {
    id String @id()
    name String @unique()
    user User @relation(fields: [id], references: [id])
    collection Collectable[] @relation("collection")
    wishlist Collectable[] @relation("wishlist")
    wares Collectable[] @relation("wares")
    description String
    image String
    achievements Achievement[]
    sales Trade[] @relation("seller")
    purchases Trade[] @relation("buyer")
    reputation Int
    givenReviews Review[] @relation("reviewer")
    receivedReviews Review[] @relation("reviewee")
    chats Chat[] @relation("ChatsUsers")
}

/// @@allow('read', true)
/// @@allow('all', auth().role == 'ADMIN')
model Collectable {
    id String @id()
    name String
    collection Profile[] @relation("collection")
    wishlist Profile[] @relation("wishlist")
    wares Profile[] @relation("wares")
    Trade Trade[]
}

/// @@allow('read', true)
/// @@allow('all', auth().role == 'ADMIN' || auth().id == reviewer.id)
model Review {
    id String @id()
    rating Int
    comment String
    reviewee Profile @relation("reviewee", fields: [reviewerId], references: [id])
    revieweeId String
    reviewer Profile @relation("reviewer", fields: [revieweeId], references: [id])
    reviewerId String
}

/// @@allow('read', true)
/// @@allow('all', auth().role == 'ADMIN')
model Achievement {
    id String @id()
    name String
    description String
    image String
    users Profile[]
}

/// @@allow('read', true)
/// @@allow('create', auth().id == sellerId)
model Trade {
    id String @id()
    seller Profile @relation("seller", fields: [sellerId], references: [id])
    sellerId String
    buyer Profile @relation("buyer", fields: [buyerId], references: [id])
    buyerId String
    collectable Collectable @relation(fields: [collectableId], references: [id])
    collectableId String
    /// @allow('update', auth().id == sellerId)
    status Status @default(PENDING)
    price Int
}

/// @@allow('create', true)
/// @@allow('read, delete, delete', users ? [user.id == auth().id])
model Chat {
    id Int @id() @default(autoincrement())
    messages Message[]
    users Profile[] @relation("ChatsUsers")
}

/// @@allow('all', senderId == auth().id)
/// @@allow('all', receiverId == auth().id)
/// @@allow('all', auth().role == 'ADMIN')
model Message {
    id Int @id() @default(autoincrement())
    chatId Int
    chat Chat @relation(fields: [chatId], references: [id])
    senderId String
    receiverId String
    content String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
}