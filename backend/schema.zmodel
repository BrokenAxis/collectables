// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = 'prisma-client-js'
  previewFeatures = ['fullTextSearch']
}

datasource db {
  provider = 'postgresql'
  url      = env('DATABASE_URL')
}

// User Schemas ----------------------------------------------------------------

enum Role {
  USER
  MANAGER
  ADMIN
}

model User {
  id      String   @id
  role    Role     @default(USER) @@deny('update', true) @@allow('create', auth().role == ADMIN)
  profile Profile?

  campaigns Campaign[] @relation('managers')

  @@allow('create, read', true)
  @@allow('update,delete', auth() == this)
  @@allow('all', auth().role == ADMIN)
}

model Profile {
  id           String         @id
  name         String         @unique
  user         User           @relation(fields: [id], references: [id])
  description  String?
  image        String?

  inventory    CollectableCount[]  @relation('inventory')
  wishlist     CollectableCount[]  @relation('wishlist')
  wares        CollectableCount[]  @relation('wares')
  
  achievements Achievement[]
  sales        Trade[]       @relation('seller')
  purchases    Trade[]       @relation('buyer')
  reputation   Float           @default(0)

  givenUserReviews    UserReview[]  @relation('reviewer')
  receivedUserReviews UserReview[]  @relation('reviewee')
  givenCampaignReviews   CampaignReview[]  @relation('reviewer')

  chats   Chat[]            @relation("ChatsUsers")
  posts   Post[]
  comments Comment[]

  @@allow('create,read', true)
  @@allow('update,delete', auth() == user)
  @@allow('all', auth().role == ADMIN)
}

model UserReview {
  id         Int   @id @default(autoincrement())
  rating     Int
  comment    String
  reviewee   Profile @relation('reviewee', fields: [reviewerId], references: [id])
  revieweeId String
  reviewer   Profile @relation('reviewer', fields: [revieweeId], references: [id])
  reviewerId String

  @@allow('read', true)
  @@allow('all', auth().role == ADMIN || auth().id == reviewer.id)
}

model Achievement {
  id          String @id
  name        String  @unique
  description String
  image       String?
  users       Profile[] @allow('all', true)

  collection  Collection @relation(fields: [id], references: [name])

  @@allow('all', true)
  @@allow('all', auth().role == ADMIN)
}

// Trade Schemas ---------------------------------------------------------------

model Trade {
  id            String      @id
  seller        Profile     @relation('seller', fields: [sellerId], references: [id])
  sellerId      String
  buyer         Profile     @relation('buyer', fields: [buyerId], references: [id])
  buyerId       String
  collectable   Collectable @relation(fields: [collectableName], references: [name])
  collectableName String
  status        Status      @default(PENDING) @allow('update', auth().id == sellerId)
  price         Int

  @@allow('read', true)
  @@allow('create' , auth().id == sellerId)
}

enum Status {
  PENDING
  ACCEPTED
  DECLINED
}

// Chat Schemas ----------------------------------------------------------------

model Chat {
  id          Int       @id @default(autoincrement())

  messages   Message[]            
  users      Profile[]   @relation("ChatsUsers")
  
  @@allow('create', true)
  @@allow('read, delete, update', users?[user.id == auth().id])
}

model Message {
  id         Int      @id @default(autoincrement())
  chatId     Int   
  chat       Chat     @relation(fields: [chatId], references: [id])
  senderId   String
  content    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@allow('all', senderId == auth().id)
  @@allow('read', chat.users?[user.id == auth().id])
  @@allow('all', auth().role == ADMIN)
}

// Forum Schemas ---------------------------------------------------------------

model Post {
    id          Int       @id @default(autoincrement())
    title       String
    description String
    image       String?
    tags        String[]
    
    campaign   Campaign?  @relation(fields: [campaignName], references: [name])
    campaignName String?
    
    author      Profile   @relation(fields: [authorId], references: [id])
    authorId    String
    
    comments    Comment[] @@allow('create', true)

    createdAt  DateTime  @default(now())
    
    @@allow('read', true)
    @@allow('all', auth().role == ADMIN || auth().id == authorId)
}

model Comment {
    id         Int       @id @default(autoincrement())

    parentCommend     Comment?  @relation('subComment', fields: [parentCommentId], references: [id])
    parentCommentId   Int?
    subComment Comment[] @relation('subComment')

    post       Post      @relation(fields: [postId], references: [id])
    postId     Int

    author     Profile   @relation(fields: [authorId], references: [id])
    authorId   String

    content    String
    createdAt  DateTime  @default(now())
    updatedAt  DateTime  @updatedAt

    reports    CommentReports[]

    @@allow('read', true)
    @@allow('all', auth().role == ADMIN || auth().id == authorId)
}

model CommentReports {
    commentId        Int       @id @default(autoincrement())

    comment  Comment   @relation(fields: [commentId], references: [id])

    @@allow('read, create', true)
    @@allow('all', auth().role == ADMIN)
}

// Collectable Schemas ---------------------------------------------------------

model Collectable {
  name        String              @id @unique
  image       String?
  tags        String[]

  count       CollectableCount[]  @relation('count')
  collection  Collection[]        @relation('collection')
  Trade       Trade[]  

  @@allow('read', true)
  @@allow('all', auth().role == ADMIN || auth().role == MANAGER)
}

model CollectableCount {
  id          Int         @id @default(autoincrement())
  collectable Collectable @relation('count', fields: [name], references: [name])
  name        String      
  count       Int         @default(0)

  inventory   Profile?    @relation('inventory', fields: [inventoryId], references: [id])
  inventoryId String?    
  wishlist    Profile?    @relation('wishlist', fields: [wishlistId], references: [id])
  wishlistId  String?
  wares       Profile?    @relation('wares', fields: [waresId], references: [id])
  waresId     String?

  @@allow('all', true)
}

model Collection {
  name        String   @id @unique
  image       String?
  tags        String[] 

  collectables Collectable[]  @relation('collection')
  collections Campaign[]
  achievement Achievement?


  @@allow('read', true)
  @@allow('all', auth().role == ADMIN || auth().role == MANAGER)
}

model Campaign {
  name       String   @id @unique
  image      String?
  tags       String[]
  start      DateTime @default(now())
  end        DateTime
  isActive   Boolean  @default(false)

  collections Collection[]

  managers   User[] @relation('managers')

  reviews  CampaignReview[]

  posts    Post[]

  @@allow('read', true)
  @@allow('all', auth().role == ADMIN || auth().role == MANAGER)
}

model CampaignReview {
  id           Int   @id @default(autoincrement())
  rating       Int
  comment      String

  campaignName String
  campaign     Campaign @relation(fields: [campaignName], references: [name])

  reviewer   Profile @relation('reviewer', fields: [reviewerId], references: [id])
  reviewerId String

  @@allow('read', true)
  @@allow('all', auth().role == ADMIN || auth().id == reviewer.id)
}