// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = 'prisma-client-js'
  previewFeatures = ['fullTextSearch']
}

datasource db {
  provider = 'postgresql'
  url      = env('DATABASE_URL')
}

// User Schemas ----------------------------------------------------------------

enum Role {
  USER
  MANAGER
  ADMIN
}

model User {
  id      String   @id
  role    Role     @default(USER) @@deny('update', true)
  profile Profile?

  campaigns Campaign[] @relation('managers')

  @@allow('create, read', true)
  @@allow('update,delete', auth() == this)
  @@allow('all', auth().role == ADMIN)
}

model Profile {
  id           String         @id
  name         String         @unique
  user         User           @relation(fields: [id], references: [id])
  description  String?
  image        String?

  inventory    CollectableCount[]  @relation('inventory')
  wishlist     CollectableCount[]  @relation('wishlist')
  wares        CollectableCount[]  @relation('wares')
  
  achievements Achievement[]
  sales        Trade[]       @relation('seller')
  purchases    Trade[]       @relation('buyer')
  reputation   Float           @default(0)

  givenReviews    Review[]  @relation('reviewer')
  receivedReviews Review[]  @relation('reviewee')
  chats   Chat[]            @relation("ChatsUsers")

  @@allow('create,read', true)
  @@allow('update,delete', auth() == user)
  @@allow('all', auth().role == ADMIN)
}

model Review {
  id         String  @id
  rating     Int
  comment    String
  reviewee   Profile @relation('reviewee', fields: [reviewerId], references: [id])
  revieweeId String
  reviewer   Profile @relation('reviewer', fields: [revieweeId], references: [id])
  reviewerId String

  @@allow('read', true)
  @@allow('all', auth().role == ADMIN || auth().id == reviewer.id)
}

model Achievement {
  name        String  @id @unique
  description String
  image       String?
  users       Profile[]

  @@allow('read', true)
  @@allow('all', auth().role == ADMIN)
}

// Trade Schemas ---------------------------------------------------------------

model Trade {
  id            String      @id
  seller        Profile     @relation('seller', fields: [sellerId], references: [id])
  sellerId      String
  buyer         Profile     @relation('buyer', fields: [buyerId], references: [id])
  buyerId       String
  collectable   Collectable @relation(fields: [collectableName], references: [name])
  collectableName String
  status        Status      @default(PENDING) @allow('update', auth().id == sellerId)
  price         Int

  @@allow('read', true)
  @@allow('create' , auth().id == sellerId)
}

enum Status {
  PENDING
  ACCEPTED
  DECLINED
}

// Chat Schemas ----------------------------------------------------------------

model Chat {
  id          Int       @id @default(autoincrement())

  messages   Message[]            
  users      Profile[]   @relation("ChatsUsers")
  
  @@allow('create', true)
  @@allow('read, delete, update', users?[user.id == auth().id])
}

model Message {
  id         Int      @id @default(autoincrement())
  chatId     Int   
  chat       Chat     @relation(fields: [chatId], references: [id])
  senderId   String
  content    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@allow('all', senderId == auth().id)
  @@allow('read', chat.users?[user.id == auth().id])
  @@allow('all', auth().role == ADMIN)
}

// Collectable Schemas ---------------------------------------------------------

model Collectable {
  name        String              @id @unique
  image       String?
  tags        String[]

  count       CollectableCount[]  @relation('count')
  collection  Collection[]        @relation('collection')
  Trade       Trade[]  

  @@allow('read', true)
  @@allow('all', auth().role == ADMIN || auth().role == MANAGER)
}

model CollectableCount {
  id          Int         @id @default(autoincrement())
  collectable Collectable @relation('count', fields: [name], references: [name])
  name        String      @@deny('update', true)
  count       Int         @default(0)

  inventory   Profile[]   @relation('inventory')
  wishlist    Profile[]   @relation('wishlist')
  wares       Profile[]   @relation('wares')

  @@allow('all', true)
}

model Collection {
  name        String   @id @unique
  image       String?
  tags        String[] 

  collectables Collectable[]  @relation('collection')
  collections Campaign[]


  @@allow('read', true)
  @@allow('all', auth().role == ADMIN || auth().role == MANAGER)
}

model Campaign {
  name       String   @id @unique
  image      String?
  tags       String[]
  start      DateTime @default(now())
  end        DateTime
  isActive   Boolean  @default(false)

  collections Collection[]

  managers   User[] @relation('managers')

  @@allow('read', true)
  @@allow('all', auth().role == ADMIN || auth().role == MANAGER)
}